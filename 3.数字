常使用数字来记录游戏得分，表示可视化数据，存储web应用信息等。

1.整数
可以对整数进行加减乘除运算，比如
>>> 2+3
5
>>> 2-3
-1
>>> 2*3
6
>>> 2/3
0.6666666666666666

用两个乘法表示乘方运算
>>> 3**3
27
>>> 2**3
8

py还支持运算次序，可以使用括号来修改运算次序，比如
>>> (2+3)*5
25
>>> (2+3)**5
3125
>>> 3+5*6
33

空格不影响py运算表达式的计算方式，只是为了更容易的阅读。

2.浮点数
很大程度上，在py中使用浮点数时，无需考虑其行为。只要输入要使用的数字，py通常都会按照你期望的方式处理。
比如
>>> 0.1+0.1
0.2
>>> 0.2+0.2
0.4
>>> 2*0.2
0.4
>>> 2/0.2
10.0
>>> 2+0.1
2.1
>>> 0.1+0.3
0.4

但是，结果所包含的小数点位数可能是不确定的。
比如
>>> 0.1+0.2
0.30000000000000004
>>> 3*0.1
0.30000000000000004
不要担心，所有语言都存在这种问题。
鉴于计算机内部表示数字的方式，有些情况下很难消除。
暂时忽略掉多余的小数位数即可。

3.使用函数str()避免类型错误。
大多数情况下，在py中使用数字都很简单。但也有一些情况结果出乎意料。比如
>>> age=23
>>> message="Happy "+age+"rd birthday"
Traceback (most recent call last):
  File "<pyshell#26>", line 1, in <module>
    message="Happy "+age+"rd birthday"
TypeError: must be str, not int
因为py不知道23是数值23还是字符2和3.
这是一个类型错误

改法1
>>> age='23'
>>> message='Happy '+age+'rd years birthday'
>>> print(message)
Happy 23rd years birthday
显得不是很专业

专业做法：
这里可以使用str()函数，将非字符串值表示为字符串。
>>> age=23
>>> message='Happy '+str(age)+'rd birthday'
>>> print(message)
Happy 23rd birthday
