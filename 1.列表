1.列表是什么？
列表是由一系列按照特定顺序排列的元素组成的。
可以把任何东西加入列表中。
列表中的元素之间没有任何关系
由于列表常常包含多个元素，建议给列表指定一个复数名称。比如letters,digits,names
用[]表示列表
用逗号分隔其中的元素

2.若用print打印列表，将打印列表的内部显示。
>>> bicycles=['trek','cannondale','redline']
>>> print(bicycles)
['trek', 'cannondale', 'redline']

3.访问列表元素
要访问列表元素，可指出列表的名称，再指出元素的索引，并放到方括号内。比如
>>> bicycles=['trek','cannondale','redline']
>>> print(bicycles)
['trek', 'cannondale', 'redline']
>>> print(bicycles[0])
trek

还可以对列表元素调用“字符串方法”，如title(),lstrip(),rstrip(),strip(),upper(),lower()
>>> print(bicycles[0])
trek
>>> print(bicycles[0].title())
Trek
>>> print(bicycles[0].upper())
TREK
>>> print(bicycles[0].lower())
trek

计数：
顺序数，从左到右，从0开始以1递增
逆序，从右到左，从-1开始以-1递减。-1表示最后一个，-2表示倒数第二个，以此类推。

可以向使用其它变量一样使用列表中的各个值。比如
>>> bicycles=['trek','cannondale','redline']
>>> message="My first bicycle was a"+bicycles[0].title()+'.'
>>> print(message)
My first bicycle was aTrek.

4.修改列表元素
重新定义即可
>>> print(names)
['a', 'b', 'c']

>>> names[0]='aaaa'
>>> print(names)
['aaaa', 'b', 'c']

5.在列表中添加元素
5.1添加到末尾
使用append()函数
>>> print(bicycles)
[]

>>> bicycles.append('honda')
>>> print(bicycles)
['honda']

>>> bicycles.append('yamaha')
>>> print(bicycles)
['honda', 'yamaha']

>>> bicycles.append('suzuki')
>>> print(bicycles)
['honda', 'yamaha', 'suzuki']

这种列表创建方式非常常见

5.2插入
用方法insert()
>>> bicycles.insert(0,'tanlulu')
>>> print(bicycles)
['tanlulu', 'honda', 'yamaha', 'suzuki', 'suzuki']

>>> bicycles.insert(1,'zhouhuihui')
>>> print(bicycles)
['tanlulu', 'zhouhuihui', 'honda', 'yamaha', 'suzuki', 'suzuki']

5.3删除
5.31若知道要删除的元素在列表中的位置，则使用del语句。
del bicycles[0]
它很特别，是一个语句。不同于其它的元素处理，其它的属于方法。

>>> bicycles=['tanlulu', 'zhouhuihui', 'honda', 'yamaha', 'suzuki', 'suzuki']
>>> del bicycles[0]
>>> print(bicycles)
['zhouhuihui', 'honda', 'yamaha', 'suzuki', 'suzuki']

>>> del bicycles[-2]
>>> print(bicycles)
['zhouhuihui', 'honda', 'yamaha', 'suzuki']

5.32使用方法pop()删除
bicycles.pop()

del语句删除后，就无法再访问那个元素。而pop可以
方法pop()可以删除列表末尾的元素
并让你能够继续使用它
相当于弹出了栈顶元素，列表就像一个栈
>>> bicycles=['tanlulu', 'zhouhuihui', 'honda', 'yamaha', 'suzuki', 'suzuki']
>>> print(bicycles)
['tanlulu', 'zhouhuihui', 'honda', 'yamaha', 'suzuki', 'suzuki']

>>> popped_bicycles=bicycles.pop()
#这里有两步操作：一是让bicycles列表进行pop，从而删除了列表的最后一个数据。二是把被删除的数据赋值给了popped_bicycles
>>> print(bicycles)
['tanlulu', 'zhouhuihui', 'honda', 'yamaha', 'suzuki']
>>> print(popped_bicycles)
suzuki

5.33弹出列表中任何位置处的元素
实际上，pop还可以指定删除列表中的任意元素。
bicycles.pop(0)

例如
>>> bicycles=['tanlulu', 'zhouhuihui', 'honda', 'yamaha', 'suzuki', 'suzuki']
>>> first_owned=bicycles.pop(0)
>>> messages='my first one is  '+first_owned
>>> print(messages)
my first one is  tanlulu

需要注意的是，使用pop()的时候，被弹出的元素就不在列表之中了。

5.34根据值删除元素，不需要知道位置，知道内容就可以。 bicycles.remove('honda')

>>> bicycles=['tanlulu', 'zhouhuihui', 'honda', 'yamaha', 'suzuki', 'suzuki']
>>> print(bicycles)
['tanlulu', 'zhouhuihui', 'honda', 'yamaha', 'suzuki', 'suzuki']

>>> bicycles.remove('honda')
>>> print(bicycles)
['tanlulu', 'zhouhuihui', 'yamaha', 'suzuki', 'suzuki']

使用remove从列表中删除元素时，可以接着使用它的值。比如
>>> bicycles=['tanlulu', 'zhouhuihui', 'honda', 'yamaha', 'suzuki', 'suzuki']

>>> too_expensive='honda'
>>> bicycles.remove(too_expensive)

>>> print(bicycles)
['tanlulu', 'zhouhuihui', 'yamaha', 'suzuki', 'suzuki']

>>> print("\nA "+too_expensive+' is too dear for me.')

A honda is too dear for me.

因为值‘honda’还存储在变量too_expensice中，所以仍能够打印。

注意：remove只能删除第一个出现的指定的值。若这个值多次出现，则需要用循环来判断。
